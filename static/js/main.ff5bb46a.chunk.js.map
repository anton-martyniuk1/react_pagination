{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","visibleItems","perPage","currentPage","onPageClick","toPrevPage","toNextPage","arrayOfPages","Array","from","_","i","className","href","onClick","map","page","id","String","at","item","items","to","numbers","n","push","getNumbers","App","state","slice","selectedPageItems","itemsCount","pageLinks","selectedPage","total","length","handleNewItems","setState","setItemsPerPage","event","value","target","Math","ceil","selectPage","selectPrevPage","selectNextPage","this","onChange","count","htmlFor","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff5bb46a.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  // total: number,\n  visibleItems: string[],\n  perPage: number,\n  currentPage: number,\n  onPageClick: (page: number) => void,\n  toPrevPage: () => void,\n  toNextPage: () => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  visibleItems,\n  perPage,\n  currentPage,\n  onPageClick,\n  toPrevPage,\n  toNextPage,\n}) => {\n  const arrayOfPages = Array.from(Array(perPage), (_, i) => i + 1);\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={`page-item ${currentPage === arrayOfPages[0] && 'disabled'}`}>\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === arrayOfPages[0]}\n            onClick={toPrevPage}\n          >\n            «\n          </a>\n        </li>\n\n        {arrayOfPages.map((page) => {\n          const handleChange = () => {\n            onPageClick(page);\n          };\n\n          return (\n            <li\n              className={`page-item ${currentPage !== page || 'active'}`}\n              key={page}\n            >\n              <a\n                id={String(page)}\n                data-cy=\"pageLink\"\n                className=\"page-link\"\n                href={`#${page}`}\n                onClick={handleChange}\n              >\n                {page}\n              </a>\n            </li>\n          );\n        })}\n\n        <li className={`page-item ${currentPage === arrayOfPages.at(-1) && 'disabled'}`}>\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === arrayOfPages.at(-1)}\n            onClick={toNextPage}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n\n      <ul>\n        {visibleItems.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\ntype State = {\n  visibleItems: string[],\n  selectedPageItems: number,\n  itemsCount: number[],\n  pageLinks: number,\n  selectedPage: number,\n};\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    visibleItems: items.slice(0, 5),\n    selectedPageItems: 5,\n    itemsCount: [3, 5, 10, 20],\n    pageLinks: 9,\n    selectedPage: 1,\n  };\n\n  total = items.length;\n\n  handleNewItems = () => {\n    this.setState(state => {\n      const { selectedPage, selectedPageItems } = state;\n\n      return ({\n        visibleItems: items.slice(\n          (selectedPage * selectedPageItems) - selectedPageItems,\n          selectedPage * selectedPageItems,\n        ),\n      });\n    });\n  };\n\n  setItemsPerPage = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectedPageItems: +value,\n      pageLinks: Math.ceil(items.length / +value),\n      selectedPage: 1,\n    });\n\n    this.handleNewItems();\n  };\n\n  selectPage = (page: number) => {\n    this.setState({ selectedPage: page });\n    this.handleNewItems();\n  };\n\n  selectPrevPage = () => {\n    this.setState(state => ({ selectedPage: state.selectedPage - 1 }));\n    this.handleNewItems();\n  };\n\n  selectNextPage = () => {\n    this.setState(state => ({ selectedPage: state.selectedPage + 1 }));\n    this.handleNewItems();\n  };\n\n  render() {\n    const {\n      visibleItems,\n      itemsCount,\n      selectedPageItems,\n      pageLinks,\n      selectedPage,\n    } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1>Items with Pagination</h1>\n\n        <p className=\"lead\" data-cy=\"info\">\n          {`Page ${selectedPage} (items ${visibleItems[0]} - ${visibleItems.at(-1)} of ${this.total})`}\n        </p>\n\n        <div className=\"form-group row\">\n          <div className=\"col-3 col-sm-2 col-xl-1\">\n            <select\n              data-cy=\"perPageSelector\"\n              id=\"perPageSelector\"\n              className=\"form-control\"\n              value={selectedPageItems}\n              onChange={this.setItemsPerPage}\n            >\n              {itemsCount.map(count => (\n                <option key={count} value={count}>\n                  {count}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n            items per page\n          </label>\n        </div>\n\n        <Pagination\n          // total={items.length}\n          visibleItems={visibleItems}\n          perPage={pageLinks}\n          currentPage={selectedPage}\n          onPageClick={this.selectPage}\n          toPrevPage={this.selectPrevPage}\n          toNextPage={this.selectNextPage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}